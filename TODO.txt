- Create UserDto to get Library for
	- Playlists
	- Artists
	- Albums
	- Discographies
	- Stations
- Finish mono arch and then plaan into microservices => LOOK AT BOTTOM!!!!!!
- Setup Unit, Integration, and maybe Acceptance Tests
- Work on Trello Board


FROM GPT FOR MICRO-SERVICE REFACTOR:
Yes, that approach would help in structuring your services effectively. Here's how you can organize your microservices:

1. **platform-user-service**
   - Manages all user-related functionalities such as registration, authentication, user profiles, etc.
   - Controllers might include `UserController`, `AuthenticationController`, etc.

2. **mood-user-service**
   - Manages user preferences specific to the MoodRadio application.
   - Controllers might include `PreferencesController`, `UserSettingsController`, etc.

3. **mood-library-service**
   - Manages all data and views related to the MoodRadio application.
   - Controllers might include `ArtistController`, `AlbumController`, `PlaylistController`, `StationController`, etc.

Each of these services will have its own database (Postgres) and cache (Redis) as needed, and they will interact with each other via APIs. This separation will make it easier to maintain, scale, and deploy your application components independently.

Here's a simplified outline for each service:

### platform-user-service
```
├── Controllers
│   ├── UserController.cs
│   └── AuthenticationController.cs
├── DB
│   ├── DbInitializer.cs
│   ├── DbTestData.cs
│   └── PostgresContext.cs
├── Dockerfile
├── Dtos
│   ├── UserDtos
│   │   ├── UserDto.cs
│   │   ├── UserRegisterDto.cs
│   │   └── UserLoginDto.cs
├── Models
│   └── User.cs
├── Program.cs
├── Repository
│   ├── IUserRepository.cs
│   └── UserRepository.cs
├── Services
│   ├── IUserService.cs
│   └── UserService.cs
├── Startup.cs
└── appsettings.json
```

### mood-user-service
```
├── Controllers
│   ├── PreferencesController.cs
│   └── UserSettingsController.cs
├── DB
│   ├── DbInitializer.cs
│   ├── DbTestData.cs
│   └── PostgresContext.cs
├── Dockerfile
├── Dtos
│   ├── PreferencesDto.cs
│   └── UserSettingsDto.cs
├── Models
│   ├── Preferences.cs
│   └── UserSettings.cs
├── Program.cs
├── Repository
│   ├── IPreferencesRepository.cs
│   ├── PreferencesRepository.cs
│   ├── IUserSettingsRepository.cs
│   └── UserSettingsRepository.cs
├── Services
│   ├── IPreferencesService.cs
│   ├── PreferencesService.cs
│   ├── IUserSettingsService.cs
│   └── UserSettingsService.cs
├── Startup.cs
└── appsettings.json
```

### mood-library-service
```
├── Controllers
│   ├── ArtistController.cs
│   ├── AlbumController.cs
│   ├── PlaylistController.cs
│   └── StationController.cs
├── DB
│   ├── DbInitializer.cs
│   ├── DbTestData.cs
│   └── PostgresContext.cs
├── Dockerfile
├── Dtos
│   ├── ArtistDtos
│   │   ├── ArtistDto.cs
│   │   ├── AlbumDto.cs
│   │   ├── SongDto.cs
│   │   ├── Requests
│   │   │   ├── ArtistRequestDto.cs
│   │   │   ├── AlbumRequestDto.cs
│   │   │   └── SongRequestDto.cs
│   │   ├── Responses
│   │   │   ├── ArtistResponseDto.cs
│   │   │   ├── AlbumResponseDto.cs
│   │   │   └── SongResponseDto.cs
├── Models
│   ├── Artist.cs
│   ├── Album.cs
│   ├── Playlist.cs
│   ├── PlaylistSong.cs
│   └── Song.cs
├── Program.cs
├── Repository
│   ├── IArtistRepository.cs
│   ├── ArtistRepository.cs
│   ├── IAlbumRepository.cs
│   ├── AlbumRepository.cs
│   ├── ISongRepository.cs
│   ├── SongRepository.cs
│   ├── IPlaylistRepository.cs
│   └── PlaylistRepository.cs
├── Services
│   ├── IArtistService.cs
│   ├── ArtistService.cs
│   ├── IAlbumService.cs
│   ├── AlbumService.cs
│   ├── ISongService.cs
│   ├── SongService.cs
│   ├── IPlaylistService.cs
│   └── PlaylistService.cs
├── Startup.cs
└── appsettings.json
```

By structuring your services this way, you can keep each component focused and cohesive, which will help in maintaining and scaling your application.
